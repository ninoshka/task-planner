const mongoose = require("mongoose");

// models are defined through the schema interface.
const TaskSchema = new mongoose.Schema({
    "title": {
        type: String,
        required: "Title is required field"
    },
    "bucketId": {
        type: String,
        required: "Bucket id is required field"
     },
    "priority": {
        type: String,
        enum: ['LOW', 'MEDIUM', 'HIGH']
    },
    "notes": {
        type: String
    },
    "dueDate": {
        type: Date
    },
    // assignedTo will store user reference
    "assignedTo": {
        type: mongoose.Schema.Types.ObjectId, ref: 'User'
    },
    // each task can be associated with only 1 plan
    // stores reference to plan object task is part of
    "plan": {
        type: mongoose.Schema.Types.ObjectId, ref: 'Plan',
        required: "Plan is required field"
    },
    "createDate": {
        type: Date,
        default: Date.now,
        immutable: true
    },
    "lastModifiedDate": {
        type: Date,
        default: Date.now,
    }
}, {
    versionKey: false,
});

// creating a virtual aatribute, naming it as 'id'
// id will be set to hex value of _id generated by mongodb
TaskSchema.virtual('id', () => {
    return this._id.toHexString();
})

// when converting Plan document to JSON, include virtual fields like id in it
// by default JSON value of objects dont contain virtual fields
TaskSchema.set('toJSON', { virtuals: true });

const Task = mongoose.model("Task", TaskSchema);

module.exports = Task;
